{
  $schema: 'https://docs.renovatebot.com/renovate-schema.json',
  extends: [
    'config:recommended',
    'docker:enableMajor',
    ':disableRateLimiting',
    ':dependencyDashboard',
    ':semanticCommits',
    ':automergeBranch',
  ],
  rangeStrategy: 'pin',
  allowCustomCrateRegistries: true,
  allowPostUpgradeCommandTemplating: true,
  allowedPostUpgradeCommands: [
    '.*',
  ],
  dependencyDashboard: true,
  dependencyDashboardTitle: 'Renovate Dashboard ðŸ¤–',
  suppressNotifications: [
    'prEditedNotification',
    'prIgnoreNotification',
  ],
  rebaseWhen: 'conflicted',
  schedule: [
    'every weekend',
  ],
  ignorePaths: [
    '**/*.sops.*',
  ],
  flux: {
    fileMatch: [
      '(^|/)kubernetes/.+\\.ya?ml(?:\\.j2)?$',
    ],
  },
  'helm-values': {
    fileMatch: [
      '(^|/)kubernetes/.+\\.ya?ml(?:\\.j2)?$',
    ],
  },
  helmfile: {
    fileMatch: [
      '(^|/)helmfile\\.ya?ml(?:\\.j2)?$',
    ],
  },
  kubernetes: {
    fileMatch: [
      '(^|/)kubernetes/.+\\.ya?ml(?:\\.j2)?$',
    ],
  },
  kustomize: {
    fileMatch: [
      '(^|/)kustomization\\.ya?ml(?:\\.j2)?$',
    ],
  },
  pip_requirements: {
    fileMatch: [
      '(^|/)[\\w-]*requirements(-\\w+)?\\.(txt|pip)(?:\\.j2)?$',
    ],
  },
  commitMessageTopic: '{{depName}}',
  commitMessageExtra: 'to {{newVersion}}',
  commitMessageSuffix: '',
  packageRules: [
    {
      description: 'Auto merge Github Actions',
      matchManagers: [
        'github-actions',
      ],
      automerge: true,
      automergeType: 'branch',
      ignoreTests: true,
      matchUpdateTypes: [
        'minor',
        'patch',
      ],
    },
    {
      description: 'Auto merge patch updates',
      matchUpdateTypes: [
        'patch',
      ],
      automerge: true,
      automergeType: 'branch',
    },
    {
      description: 'Auto merge minor updates for safe dependencies',
      matchUpdateTypes: [
        'minor',
      ],
      automerge: true,
      automergeType: 'branch',
      matchPackageNames: [
        '/^ghcr\\.io//',
        '/^docker\\.io//',
        '/^quay\\.io//',
        '/^registry\\.k8s\\.io//',
        '!/^ghcr\\.io/fluxcd//',
        '!/^ghcr\\.io/siderolabs//',
      ],
    },
    {
      description: 'Add area label for kubernetes files',
      matchFileNames: [
        'kubernetes/**',
      ],
      addLabels: [
        'area/kubernetes',
      ],
    },
    {
      description: 'Add area label for github files',
      matchFileNames: [
        '.github/**',
      ],
      addLabels: [
        'area/github',
      ],
    },
    {
      description: 'Add area label for bootstrap files',
      matchFileNames: [
        'bootstrap/**',
      ],
      addLabels: [
        'area/bootstrap',
      ],
    },
    {
      description: 'Add area label for taskfile',
      matchFileNames: [
        '.taskfiles/**',
        'Taskfile*',
      ],
      addLabels: [
        'area/taskfile',
      ],
    },
    {
      description: 'Add area label for docs',
      matchFileNames: [
        'docs/**',
      ],
      addLabels: [
        'area/docs',
      ],
    },
    {
      description: 'Flux Group',
      groupName: 'Flux',
      matchDatasources: [
        'docker',
        'github-tags',
      ],
      versioning: 'semver',
      group: {
        commitMessageTopic: '{{{groupName}}} group',
      },
      separateMinorPatch: true,
      matchPackageNames: [
        '/^fluxcd\\//',
      ],
    },
    {
      description: 'Talos Group',
      groupName: 'Talos',
      matchDatasources: [
        'docker',
      ],
      group: {
        commitMessageTopic: '{{{groupName}}} group',
      },
      separateMinorPatch: true,
      addLabels: [
        'distro/talos',
      ],
      matchPackageNames: [
        '/^siderolabs\\/talosctl$/',
        '/^siderolabs\\/installer$/',
      ],
    },
    {
      description: 'Add hold label for blocked updates',
      addLabels: [
        'hold/upstream',
      ],
      matchPackageNames: [
        '/^blocked-dependency$/',
      ],
    },
    {
      matchDatasources: [
        'helm',
      ],
      commitMessageTopic: 'chart {{depName}}',
    },
    {
      matchDatasources: [
        'docker',
      ],
      commitMessageTopic: 'image {{depName}}',
    },
    {
      matchDatasources: [
        'docker',
      ],
      matchUpdateTypes: [
        'major',
      ],
      commitMessagePrefix: 'feat(container)!: ',
      addLabels: [
        'type/major',
        'type/break',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      matchUpdateTypes: [
        'minor',
      ],
      semanticCommitType: 'feat',
      semanticCommitScope: 'container',
      addLabels: [
        'type/minor',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      matchUpdateTypes: [
        'patch',
      ],
      semanticCommitType: 'fix',
      semanticCommitScope: 'container',
      addLabels: [
        'type/patch',
      ],
    },
    {
      matchDatasources: [
        'docker',
      ],
      matchUpdateTypes: [
        'digest',
      ],
      semanticCommitType: 'chore',
      semanticCommitScope: 'container',
      addLabels: [
        'type/patch',
      ],
    },
    {
      matchDatasources: [
        'helm',
      ],
      matchUpdateTypes: [
        'major',
      ],
      commitMessagePrefix: 'feat(helm)!: ',
      addLabels: [
        'type/major',
        'type/break',
      ],
    },
    {
      matchDatasources: [
        'helm',
      ],
      matchUpdateTypes: [
        'minor',
      ],
      semanticCommitType: 'feat',
      semanticCommitScope: 'helm',
      addLabels: [
        'type/minor',
      ],
    },
    {
      matchDatasources: [
        'helm',
      ],
      matchUpdateTypes: [
        'patch',
      ],
      semanticCommitType: 'fix',
      semanticCommitScope: 'helm',
      addLabels: [
        'type/patch',
      ],
    },
    {
      matchDatasources: [
        'github-releases',
        'github-tags',
      ],
      matchUpdateTypes: [
        'major',
      ],
      commitMessagePrefix: 'feat(github-release)!: ',
      addLabels: [
        'type/major',
        'type/break',
      ],
    },
    {
      matchDatasources: [
        'github-releases',
        'github-tags',
      ],
      matchUpdateTypes: [
        'minor',
      ],
      semanticCommitType: 'feat',
      semanticCommitScope: 'github-release',
      addLabels: [
        'type/minor',
      ],
    },
    {
      matchDatasources: [
        'github-releases',
        'github-tags',
      ],
      matchUpdateTypes: [
        'patch',
      ],
      semanticCommitType: 'fix',
      semanticCommitScope: 'github-release',
      addLabels: [
        'type/patch',
      ],
    },
    {
      matchManagers: [
        'github-actions',
      ],
      matchUpdateTypes: [
        'major',
      ],
      commitMessagePrefix: 'feat(github-action)!: ',
      addLabels: [
        'type/major',
        'type/break',
      ],
    },
    {
      matchManagers: [
        'github-actions',
      ],
      matchUpdateTypes: [
        'minor',
      ],
      semanticCommitType: 'feat',
      semanticCommitScope: 'github-action',
      addLabels: [
        'type/minor',
      ],
    },
    {
      matchManagers: [
        'github-actions',
      ],
      matchUpdateTypes: [
        'patch',
      ],
      semanticCommitType: 'fix',
      semanticCommitScope: 'github-action',
      addLabels: [
        'type/patch',
      ],
    },
  ],
  customManagers: [
    {
      customType: 'regex',
      description: 'Process custom dependencies',
      fileMatch: [
        '(^|/)kubernetes/.+\\.ya?ml(?:\\.j2)?$',
      ],
      matchStrings: [
        'datasource=(?<datasource>\\S+) depName=(?<depName>\\S+)( repository=(?<registryUrl>\\S+))?\\n.+: (&\\S+\\s)?(?<currentValue>\\S+)',
      ],
      datasourceTemplate: '{{#if datasource}}{{{datasource}}}{{else}}github-releases{{/if}}',
    },
  ],
}
